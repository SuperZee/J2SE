package com.lee.spi_11.sorfarray;

public class Demo {
	public static void main(String[] args) {
		int[] arr = { 3, -1, 4, 7, -2 };
		System.out.println(bufferSort(arr));
		print(arr);

	}

	// 打印数组
	public static void print(int arr[]) {
		for (int i = 0; i < arr.length; i++) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ", ");
			}
		}
	}

	// 冒泡排序
	public static long bufferSort(int arr[]) {
		// 冒泡排序
		// 外层循环控制排序次数
		// 内层循环控制比较次数
		// temp用来交换的时候的所需要的临时变量
		// 定义排序前时间
		long start = System.currentTimeMillis();
		int temp = 0;
		for (int i = 0; i < arr.length - 1; i++) {
			// 每次排序后 最大的数被放在最上面 就不需要再排序了
			for (int j = 0; j < arr.length - i - 1; j++) {
				if (arr[j] > arr[j + 1]) {
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		long end = System.currentTimeMillis();
		return start - end;
	}
	// 选择排序
	// 选择排序也属于内部排序法，是从欲排序的数据中，按指定的规则
	// 选出某一元素。经过和其他元素重整，再依次原则交换位置后达到排序的目的
}
